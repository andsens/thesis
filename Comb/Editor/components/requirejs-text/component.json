{
  "name": "requirejs-text",
  "version": "2.0.3",
  "description": "An AMD loader plugin for loading text resources.",
  "categories": [
    "Loader plugins"
  ],
  "main": "text.js",
  "github": "https://github.com/requirejs/text",
  "bugs": {
    "url": "https://github.com/requirejs/text/issues"
  },
  "repositories": [
    {
      "type": "git",
      "url": "https://github.com/requirejs/text.git"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    },
    {
      "type": "BSD New",
      "url": "http://opensource.org/licenses/BSD-3-Clause"
    }
  ],
  "volo": {
    "url": "https://raw.github.com/requirejs/text/{version}/text.js"
  },
  "gitHead": "e753e8f153cf72b41f925cb0824a6b4feffb741a",
  "readme": "# text\n\nA [RequireJS](http://requirejs.org)/AMD loader plugin for loading text\nresources.\n\nKnown to work in RequireJS, but should work in other AMD loaders that support\nthe same loader plugin API.\n\n## Docs\n\nSee the [RequireJS API text section](http://requirejs.org/docs/api.html#text).\n\n## Latest release\n\nThe latest release is always available from [the \"latest\" tag](https://raw.github.com/requirejs/text/latest/text.js).\n\nIt can also be installed using [volo](https://github.com/volojs/volo):\n\n    volo add requirejs/text\n\n## Usage\n\nIt is nice to build HTML using regular HTML tags, instead of building up DOM\nstructures in script. However, there is no good way to embed HTML in a\nJavaScript file. The best that can be done is using a string of HTML, but that\ncan be hard to manage, particularly for multi-line HTML.\n\nThe text.js AMD loader plugin can help with this issue. It will automatically be\nloaded if the text! prefix is used for a dependency. Download the plugin and put\nit in the app's [baseUrl](http://requirejs.org/docs/api.html#config-baseUrl)\ndirectory.\n\nYou can specify a text file resource as a dependency like so:\n\n```javascript\nrequire([\"some/module\", \"text!some/module.html\", \"text!some/module.css\"],\n    function(module, html, css) {\n        //the html variable will be the text\n        //of the some/module.html file\n        //the css variable will be the text\n        //of the some/module.css file.\n    }\n);\n```\n\nNotice the .html and .css suffixes to specify the extension of the file. The\n\"some/module\" part of the path will be resolved according to normal module name\nresolution: it will use the **baseUrl** and **paths** [configuration\noptions](http://requirejs.org/docs/api.html#config) to map that name to a path.\n\nFor HTML/XML/SVG files, there is another option. You can pass !strip, which\nstrips XML declarations so that external SVG and XML documents can be added to a\ndocument without worry. Also, if the string is an HTML document, only the part\ninside the body tag is returned. Example:\n\n```javascript\nrequire([\"text!some/module.html!strip\"],\n    function(html) {\n        //the html variable will be the text of the\n        //some/module.html file, but only the part\n        //inside the body tag.\n    }\n);\n```\n\nThe text files are loaded via asynchronous XMLHttpRequest (XHR) calls, so you\ncan only fetch files from the same domain as the web page (see **XHR\nrestrictions** below).\n\nHowever, [the RequireJS optimizer](http://requirejs.org/docs/optimization.html)\nwill inline any text! references with the actual text file contents into the\nmodules, so after a build, the modules that have text! dependencies can be used\nfrom other domains.\n\n## Configuration\n\n### XHR restrictions\n\nThe text plugin works by using XMLHttpRequest (XHR) to fetch the text for the\nresources it handles.\n\nHowever, XHR calls have some restrictions, due to browser/web security policies:\n\n1) Many browsers do not allow file:// access to just any file. You are better\noff serving the application from a local web server than using local file://\nURLs. You will likely run into trouble otherwise.\n\n2) There are restrictions for using XHR to access files on another web domain.\nWhile CORS can help enable the server for cross-domain access, doing so must\nbe done with care (in particular if you also host an API from that domain),\nand not all browsers support CORS.\n\nSo if the text plugin determines that the request for the resource is on another\ndomain, it will try to access a \".js\" version of the resource by using a\nscript tag. Script tag GET requests are allowed across domains. The .js version\nof the resource should just be a script with a define() call in it that returns\na string for the module value.\n\nExample: if the resource is 'text!example.html' and that resolves to a path\non another web domain, the text plugin will do a script tag load for\n'example.html.js'.\n\nThe [requirejs optimizer](http://requirejs.org/docs/optimization.html) will\ngenerate these '.js' versions of the text resources if you set this in the\nbuild profile:\n\n    optimizeAllPluginResources: true\n\nIn some cases, you may want the text plugin to not try the .js resource, maybe\nbecause you hae configured CORS on the other server, and you know that only\nbrowsers that support CORS will be used. In that case you can use the\n[module config](http://requirejs.org/docs/api.html#config-moduleconfig)\n(requires RequireJS 2+) to override some of the basic logic the plugin uses to\ndetermine if the .js file should be requested:\n\n```javascript\nrequirejs.config({\n    config: {\n        text: {\n            useXhr: function (url, protocol, hostname, port) {\n                //Override function for determining if XHR should be used.\n                //url: the URL being requested\n                //protocol: protocol of page text.js is running on\n                //hostname: hostname of page text.js is running on\n                //port: port of page text.js is running on\n                //Use protocol, hostname, and port to compare against the url\n                //being requested.\n                //Return true of false. true means \"use xhr\", false means\n                //\"fetch the .js version of this resource\".\n            }\n        }\n    }\n});\n```\n\n### Custom XHR hooks\n\nThere may be cases where you might want to provide the XHR object to use\nin the request, or you may just want to add some custom headers to the\nXHR object used to make the request. You can use the following hooks:\n\n```javascript\nrequirejs.config({\n    config: {\n        text: {\n            onXhr: function (xhr, url) {\n                //Called after the XHR has been created and after the\n                //xhr.open() call, but before the xhr.send() call.\n                //Useful time to set headers.\n                //xhr: the xhr object\n                //url: the url that is being used with the xhr object.\n            },\n            createXhr: function () {\n                //Overrides the creation of the XHR object. Return an XHR\n                //object from this function.\n                //Available in text.js 2.0.1 or later.\n            }\n        }\n    }\n});\n```\n\n### Forcing the environment implemention\n\nThe text plugin tries to detect what environment it is available for loading\ntext resources, Node, XMLHttpRequest (XHR) or Rhino, but sometimes the\nNode or Rhino environment may have loaded a library that introduces an XHR\nimplementation. You can foce the environment implementation to use by passing\nan \"env\" module config to the plugin:\n\n```javascript\nrequirejs.config({\n    config: {\n        text: {\n            //Valid values are 'node', 'xhr', or 'rhino'\n            env: 'rhino'\n        }\n    }\n});\n```\n\n## License\n\nDual-licensed -- new BSD or MIT.\n\n## Where are the tests?\n\nThey are in the [requirejs](https://github.com/jrburke/requirejs) and\n[r.js](https://github.com/jrburke/r.js) repos.\n\n## History\n\nThis plugin was in the [requirejs repo](https://github.com/jrburke/requirejs)\nup until the requirejs 2.0 release.\n",
  "readmeFilename": "README.md",
  "_id": "text@2.0.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/requirejs/text"
  }
}