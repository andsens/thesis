// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['comb/mustache'], function(Mustache) {
    'use strict';

    var UnescapedVariable;
    return UnescapedVariable = (function(_super) {

      __extends(UnescapedVariable, _super);

      function UnescapedVariable() {
        return UnescapedVariable.__super__.constructor.apply(this, arguments);
      }

      UnescapedVariable.prototype.initialize = function() {
        UnescapedVariable.__super__.initialize.apply(this, arguments);
        return this.nodes = [];
      };

      UnescapedVariable.prototype.parse = function() {
        var node, _results;
        UnescapedVariable.__super__.parse.apply(this, arguments);
        node = this.node();
        switch (this.prev.type) {
          case 'section':
          case 'escaped':
          case 'text':
            if (node.nodeType === 3 && node.data.length === this.strOffset) {
              this.nodeOffset += 1;
            }
            break;
          case 'null':
            break;
          case 'unescaped':
            throw new Error("Unsupported matching type");
            break;
          case 'node':
          case 'emptynode':
          case 'comment':
            this.nodeOffset += 1;
        }
        node = this.node();
        _results = [];
        while (node != null) {
          this.nodes.push(node);
          _results.push(node = node.nextSibling);
        }
        return _results;
      };

      UnescapedVariable.prototype.getRoot = function() {
        var obj, parent, parentNode;
        parent = parentNode = this.parent;
        if (parent.nodeType === 2) {
          parentNode = parent.ownerElement;
        }
        obj = {
          type: 'unescaped',
          nodes: this.nodes,
          update: this.update,
          parent: parent,
          parentNode: parentNode
        };
        return obj;
      };

      UnescapedVariable.prototype.getValues = function(merge) {
        if (merge != null) {
          if (!_.isArray(merge)) {
            merge = [merge];
          }
          merge.push(this.getRoot());
        } else {
          merge = this.getRoot();
        }
        return merge;
      };

      UnescapedVariable.prototype.update = function() {};

      return UnescapedVariable;

    })(Mustache);
  });

}).call(this);
