// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['comb/mustache', 'comb/section', 'exports'], function(Mustache, Section, exports) {
    'use strict';

    var Partial;
    Partial = (function(_super) {

      __extends(Partial, _super);

      function Partial() {
        return Partial.__super__.constructor.apply(this, arguments);
      }

      Partial.prototype.initialize = function() {
        return Partial.__super__.initialize.apply(this, arguments);
      };

      Partial.prototype.parse = function() {
        Partial.__super__.parse.apply(this, arguments);
        if (!((this.partials != null) && (this.partials[this.name] != null))) {
          throw new Error("Partial specification for " + this.name + " not found");
        }
        this.partials[this.name].verbose = this.spec.verbose;
        return this.root = new Section.Section(0, this.partials[this.name], this.partials, this.parent);
      };

      Partial.prototype.getRoot = function() {
        return {
          type: 'partial',
          iterations: this.root.getObject().iterations[0]
        };
      };

      Partial.prototype.getValues = function(merge) {
        var name, value, values;
        values = this.root.getValues([])[0];
        for (name in values) {
          value = values[name];
          merge[name] = value;
        }
        return merge;
      };

      return Partial;

    })(Mustache);
    return exports.Partial = Partial;
  });

}).call(this);
